Subject,Code,Description
CMPS,101,"Introduction to Computer Science - This course introduces the skills, concepts, and capabilities needed for effective use of information technology (IT). It includes logical reasoning, organization of information, managing complexity, operations of computers and networks, digital representation of information, security principles, and the use of contemporary applications such as effective Web search, spreadsheets, and database systems. Also, it includes a basic introduction to programming and problem solving through scripting web applications."
CMPS,200,"Introduction to Programming - An introduction to a disciplined approach to computer programming and problem solving, utilizing a block-structured high level language, with an emphasis on procedural abstraction and good programming style. This course covers the basic repetition and selection constructs, procedures and functions, parameter passing, and scope of variables"
CMPS,206,"Computers and Programming for the Arts - This course is an introductory computer course that presents computing and information, and illustrates their use. The student is introduced to computers and their role in society with emphasis on conceptual understanding as well as operational proficiency. Topics include principles of computer operations both from the hardware and software perspectives, basic networking concepts, web authoring concepts including HTML, cascading style sheets, and publishing, and data manipulation using spreadsheets and databases"
CMPS,207,"Programming for Digital Art - This course introduces students to the technical and conceptual skills necessary for developing web sites and for analyzing and visualizing real data . In web design, students will learn HTML5 and CSS3. In data analysis and visualization, students will learn to code using Python with an emphasis on organizing, analyzing, and plotting data. Visualizations produced by Python can then be embedded into html pages. The core skills learned in this course will be applicable to most programming languages."
CMPS,209,"Computers and Programming for the Sciences - This course is designed to cover the essential computer skills needed by students in sciences and business majors. The course introduces how computers and Internet technologies work by emphasizing conceptual understanding as well as practical operational proficiency. Specifically, the course covers the essential concepts needed for designing spreadsheet applications, building personal relational databases, and programming using Visual Basic. Other topics covered include networking basics."
CMPS,211,"Discrete Structures - This course introduces students to discrete structures, focusing on those relevant to computing sciences. Topics covered include Logic and Proofs, Sets, Sequences, Functions, Growth of Functions, Algorithms and their complexities, Induction and Recursion, Counting, and Recurrence Relations."
CMPS,212,"Intermediate Programming with Data Structures - A continuation of CMPS 200, this course consolidates algorithm design and programming techniques, emphasizing large programs. This course also provides a detailed study of data structures and data abstraction, and an introduction to complexity considerations and program verification."
CMPS,230,"Digital Media Programming - The class is an introduction to digital media programming and processing. The course explains the essential technology behind images, animations, sound, and video and illustrates how to write interactive programs that manipulate these media in creative ways. The class assumes basic knowledge in Java or a first course in programming."
CMPS,251,"Numerical Computing - Techniques of numerical analysis: number representations and round-off errors, root finding, approximation of functions, integration, solving initial value problems, MonteCarlo methods. Implementations and analysis of the algorithms are stressed. Projects using MATLAB or a similar tool are assigned."
CMPS,252,"Software Construction - Software Construction provides methods, tools and techniques to develop, modify and maintain complex and efficient software systems. Topics include object oriented design; specifications and invariants; abstract data types, testing, design patterns, concurrency; version control and event driven programming."
CMPS,253,"Software Engineering - This course introduces practical industry-standard software engineering best practices to students that have already written moderate sized software. Students are exposed to full development lifecycle from choosing the right SDLC, to requirements management, software design, development, patterns, testing and UAT. A group term project provides a holistic hands-on experience building an end-to-end software application emulating a real-world environment often for real clients with real needs. Other topics covered include working in a team, professionalism, project management, risk, and ethics."
CMPS,255,"Computer Architecture - A structured overview of the fundamentals of designing digital computer systems. Topics covered include digital logic and systems, machine level representation of data, assembly level machine organization, memory system organization and architecture, CPU implementation and virtual machines, and exposure to one or more micro/mini architectures"
CMPS,256,"Algorithms and Data Structures - A systematic study of algorithms and advanced data structures and their complexity. Topics include techniques for designing efficient computer algorithms, proving their correctness, and analyzing their complexity as well as advanced searching, sorting, selection, priority queues, binary search trees, graph, hash tables, and matrix algorithms"
CMPS,257,"Theory of Computation - A course that covers basics of Automata and Language Theory, Computation Theory, and Complexity Theory. Topics include regular expressions, finite automata, contextfree grammars and parsing, pushdown automata, closure properties, Turing machines, Church’s thesis, reductions and decidability, time complexity and NP-completeness, space complexity, polynomial-space and log-space computations, circuit complexity, probabilistic computations and complexity classes, approximation algorithms, and selected topics as time permits."
CMPS,258,"Programming Languages - A course on the principles and programming styles that govern the design and implementation of contemporary programming languages, a history and overview of programming languages, fundamental issues in language design, and an introduction to language translation. This course focuses on design issues in imperative, objectoriented, functional, and rule-based paradigms. Various programming languages will be studied and experimented with to illustrate key concepts."
CMPS,272,"Operating Systems - This course provides an introduction to the fundamentals of operating system function, design, and implementation. It contains a theory component illustrating the concepts and principles that underlie modern operating systems and a practice component to relate theoretical principles with operating system implementation. The course is divided into three major parts. The first part of the course discusses concurrency (processes, threads, scheduling, synchronization, and deadlocks). The second part of the course discusses memory management (memory management strategies and virtual memory management). The third part of the course concerns file systems, including topics such as secondary storage systems and I/O systems. If time permits, the following topics will be briefly examined: Virtualization, security, distributed synchronization, and perhaps other topics. A case study of a contemporary operating system like UNIX accompanies the course."
CMPS,273,"Systems and Network Programming - This course focuses on the programming aspects of networking protocols. Topics include: Designing and building programming applications that use computer networks, fundamental concepts required to build iterative and concurrent client/server networking applications using sockets. Then it moves to explain low level networking programming and other advanced socket topics. The course also presents the emerging peer-to-peer computing along with some tools needed to develop P2P applications."
CMPS,274,"Compiler Construction - A course that covers syntax specifications of programming languages, parsing theory, top-down and bottom-up parsing, parser generators, syntax-directed code generation, symbol table organization and management, dynamic storage allocation, code optimization, dataflow analysis, and register allocation."
CMPS,276,"Data Science - Data Science is one of the fastest growing fields of this decade. We are inundated with data and yet need to make sense of it. Organisations use their data for decision support and to build dataintensive products and services. Various inter-disciplinary technologies are emerging to help us make sense of this data, and become more intelligent in our decisions. The collection of skills required by organisations to support these functions has been grouped under the term “Data Science”. This introductory course will attempt to articulate the expected output of Data Scientists, and to help equip the students with the ability to deliver against these expectations, learning from data, and eventually gaining predictions and insights. Through real-world examples of wide interest, we introduce several key facets of the data science pipeline (lifecycle) using both the R and Python programming languages."
CMPS,277,Database Systems - This course covers the fundamental concepts of database systems. Topics include data modeling using the Entity-Relationship model and the Relation model; query languages including relational algebra and SQL; File Organization and Indexing; Normalization; database programming; and noSQL databases. The course is offered in blended-format and includes a term project.
CMPS,278,"Web Programming and Design - This course introduces the fundamentals needed to program on the Internet as well as the state of the art technologies used in designing and developing rich multi-tiered web based applications. It presents the basics of client-side/server-side web programming and the skills and tools needed to create dynamic Web-based applications. It provides in-depth coverage of various markup languages (XHTML, Dynamic HTML and XML) and their associated cascading style sheets, several client side and server side scripting languages (JavaScript, PHP) in addition to AJAX-enabled rich Internet applications, client-side technologies, web services, Web Servers, and multi-tiered applications using relational database systems."
CMPS,281,"Numerical Linear Algebra - A course on direct and interactive methods for solving general and special systems of linear equations, covering LU decomposition, Choleski decomposition, nested dissection, marching algorithms; Jacobi, Gauss-Seidel, successive over-relaxation, alternating directions, and conjugate gradient iterative methods. This course is equivalent to MATH 281."
CMPS,282,"Advanced Software Engineering - A course on state of the art software engineering for large distributed and concurrent systems. Fundamental principles and concepts for specifying, designing, analyzing, implementing, and testing such systems. Concurrent object oriented paradigms. Design patterns. Use of tools. Documentation using both formal and informal descriptions. Students will develop at least one large software system as part of the course."
CMPS,284,"Computer Networks - An introduction to network architectures and protocols, placing emphasis on Internet design principles and methodology. Specific topics include application layer protocols, network programming, transport protocols, circuit switching and packet switching, routing algorithms, multicast, local and wide area networks, error detection and correction, and performance evaluation."
CMPS,285,"Computer Graphics - A course that covers the practice of, and underlying mathematical foundation for, interactive graphics programming. Topics include basic graphics systems, graphics primitives and attributes, windows and viewports, clipping, geometric transformations, color systems, 2D texture mapping, and introduction to 3D graphics. Programming in OpenGL will be used."
CMPS,286,"Computer-Aided Geometric Design - A course that discusses the representation of free-form curves and surfaces in modeling objects by computers, including curve approximation and interpolation, spline curves (Bezier and B-splines), visual smoothness of curves, geometric continuity, parameterization of curves, introduction to surface interpolation and approximation, and spline surfaces (Bezier and B-splines)."
CMPS,287,"Artificial Intelligence - This course in Artificial Intelligence covers most Machine Learning theory, algorithms, and applications. Machine Learning is currently at the heart of Artificial Intelligence. It enables computational systems to adaptively improve their performance with experience accumulated from the observed data. This course balances theory and practice and covers the mathematical as well as the heuristic aspects. It also covers latest trends in Machine Learning such as deep learning."
CMPS,288,"Internals of Database Management Systems - A course on the internals of database management systems, especially relational DBMS. Topics include query processing and optimization, transaction processing, concurrency control, recovery, distributed transactions, database security, client-server, multi-tier architectures, and web deployed database systems."
CMPS,289,"Human Computer Interaction - This course describes the psychological principles of human-computer interaction. Evaluation of user interfaces. Usability engineering. Task analysis, user-centered design, and prototyping. Conceptual models and metaphors. Software design rationale. Design of windows, menus, and commands. Voice and natural language I/O. Response time and feedback. Color, icons, and sound. Internationalization and localization. User interface architectures and APIs. Case studies and project."
CMPS,296,Computer Science Tutorial
CMPS,297,Special Topics in Computer Science - A course on selected topics which change according to the interests of instructors and/or students. Topics are chosen from state-of-the-art innovations in software and computer information systems
CMPS,299,"Software Graduation Project - A course to enhance students’ skills with practical experience giving them the opportunity to integrate knowledge accumulated in different courses. In this course, students must deliver a software product which passes through the design, analysis, implementation, testing, and evaluation stages"
